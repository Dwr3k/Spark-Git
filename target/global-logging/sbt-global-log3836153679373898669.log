[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Consultant\AppData\Local\Temp\idea8.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Consultant\AppData\Local\Temp\idea8.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.0 (Oracle Corporation Java 1.8.0_361)
[debug]       Load.loadUnit: plugins took 138.0885ms
[debug]       Load.loadUnit: defsScala took 0.3648ms
[debug] [Loading] Scanning directory C:\Users\Consultant\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Consultant\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 26.0519 ms
[debug]           Load.resolveProject(global-plugins) took 64.1137ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Consultant\.sbt\1.0\plugins, plugins: List(<none>))) took 139.3893ms
[debug] [Loading] Done in C:\Users\Consultant\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 303.7358ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3388ms
[debug]     Load.loadUnit(file:/C:/Users/Consultant/.sbt/1.0/plugins/, ...) took 451.6975ms
[debug]   Load.apply: load took 726.2289ms
[debug]   Load.apply: resolveProjects took 8.063ms
[debug]   Load.apply: finalTransforms took 90.2887ms
[debug]   Load.apply: config.delegates took 10.6482ms
[debug]   Load.apply: Def.make(settings)... took 565.9766ms
[debug]   Load.apply: structureIndex took 147.0893ms
[debug]   Load.apply: mkStreams took 2.6347ms
[info] loading global plugins from C:\Users\Consultant\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3737.6068ms
[debug]           Load.loadUnit: plugins took 49.9685ms
[debug]           Load.loadUnit: defsScala took 0.0087ms
[debug] [Loading] Scanning directory C:\Users\Consultant\IdeaProjects\Pipeline Project\project
[debug]             Load.loadUnit: mkEval took 14.4988ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Consultant\IdeaProjects\Pipeline Project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.1973 ms
[info] loading settings for project pipeline-project-build from idea8.sbt ...
[debug]               Load.resolveProject(pipeline-project-build) took 4.6085ms
[debug]             Load.loadTransitive: finalizeProject(Project(id pipeline-project-build, base: C:\Users\Consultant\IdeaProjects\Pipeline Project\project, plugins: List(<none>))) took 8.4859ms
[debug] [Loading] Done in C:\Users\Consultant\IdeaProjects\Pipeline Project\project, returning: (pipeline-project-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3304.5541ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.5569ms
[debug]         Load.loadUnit(file:/C:/Users/Consultant/IdeaProjects/Pipeline%20Project/project/, ...) took 3362.7067ms
[debug]       Load.apply: load took 3364.4802ms
[debug]       Load.apply: resolveProjects took 0.1469ms
[debug]       Load.apply: finalTransforms took 13.2068ms
[debug]       Load.apply: config.delegates took 0.5488ms
[debug]       Load.apply: Def.make(settings)... took 104.3555ms
[debug]       Load.apply: structureIndex took 33.6452ms
[debug]       Load.apply: mkStreams took 0.0028ms
[info] loading project definition from C:\Users\Consultant\IdeaProjects\Pipeline Project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5273.3728ms
[debug]     Load.loadUnit: defsScala took 0.0033ms
[debug] [Loading] Scanning directory C:\Users\Consultant\IdeaProjects\Pipeline Project
[debug]       Load.loadUnit: mkEval took 0.4875ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.9844 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 40.4093ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Consultant\IdeaProjects\Pipeline Project, plugins: List(<none>))) took 45.9052ms
[debug] [Loading] Done in C:\Users\Consultant\IdeaProjects\Pipeline Project, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 3135.9294ms
[debug]     Load.loadUnit: cleanEvalClasses took 29.833ms
[debug]   Load.loadUnit(file:/C:/Users/Consultant/IdeaProjects/Pipeline%20Project/, ...) took 8439.9934ms
[debug] Load.apply: load took 8442.3841ms
[debug] Load.apply: resolveProjects took 0.4639ms
[debug] Load.apply: finalTransforms took 31.5491ms
[debug] Load.apply: config.delegates took 0.4599ms
[debug] Load.apply: Def.make(settings)... took 97.7627ms
[debug] Load.apply: structureIndex took 23.7242ms
[debug] Load.apply: mkStreams took 0.0039ms
[info] set current project to Pipeline_Project (in build file:/C:/Users/Consultant/IdeaProjects/Pipeline%20Project/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58301 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58301, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Pipeline_Project (in build file:/C:/Users/Consultant/IdeaProjects/Pipeline%20Project/)
[debug] > Exec(idea-shell, None, None)
